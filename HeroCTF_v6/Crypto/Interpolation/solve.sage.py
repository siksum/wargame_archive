

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_256 = Integer(256); _sage_const_189 = Integer(189); _sage_const_16 = Integer(16); _sage_const_9000 = Integer(9000); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4)
from Crypto.Util.number import long_to_bytes, bytes_to_long
from itertools import product
import hashlib
import string
import tqdm
import pwn

CHARSET = string.ascii_letters + string.digits + "_{}"

F = FiniteField(_sage_const_2 **_sage_const_256  - _sage_const_189 )
R = PolynomialRing(F, "x")
H = lambda n: int(hashlib.sha256(n).hexdigest(), _sage_const_16 )

#r = pwn.process(["sage", "chall.sage"])
r = pwn.remote("crypto.heroctf.fr", int(_sage_const_9000 ))

points = eval(r.recvlineS())
points += [[_sage_const_0 , H(b"Hero")]]

f = R.lagrange_polynomial(points)
print("Found polynomial", f)

coeffs = [*map(int, f.coefficients())]
flag = [b"____"] * len(coeffs)

for a, b, c, d in product(CHARSET, repeat=_sage_const_4 ):
    p = (a + b + c + d).encode()
    h = int(H(p))

    if h in coeffs:
        flag[coeffs.index(h)] = p
        print(b"".join(flag))

